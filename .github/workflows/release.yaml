name: Release

on:
  push:
    tags:
      - "v*"

env:
  DOCKER_BUILDKIT: 1

jobs:
  create-release:
    runs-on: ubuntu-20.04

    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build-engine:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Build engine
        run: |
          cargo build --release -p kime-engine-capi -p kime-check
          strip -s ./target/release/libkime_engine.so
          strip -s ./target/release/kime-check
      - name: Upload engine
        uses: actions/upload-artifact@v2
        with:
          name: engine
          path: ./target/release/libkime_engine.so
      - name: Upload check
        uses: actions/upload-artifact@v2
        with:
          name: check
          path: ./target/release/kime-check

  build-other:
    needs:
      - build-engine
      - create-release

    runs-on: ubuntu-18.04

    steps:
      - name: Remove broken apt repos [Ubuntu]
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git gcc libclang-10-dev llvm cargo pkg-config
          sudo apt-get install -y libpango1.0-dev libcairo2-dev libgtk2.0-dev libgtk-3-dev libglib2.0 libxcb1 libappindicator3-dev
          wget https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-Linux-x86_64.sh && sudo sh cmake-3.19.5-Linux-x86_64.sh --skip-license --prefix=/usr

      - name: Download engine
        uses: actions/download-artifact@v2
        with:
          name: engine
          path: .

      - name: Download check
        uses: actions/download-artifact@v2
        with:
          name: check
          path: .

      - name: Install engine
        run: sudo mv ./libkime_engine.so /usr/lib

      - name: Build
        run: |
          KIME_SKIP_ENGINE=1 scripts/build.sh -ar
          cp /usr/lib/libkime_engine.so ./build/out
          mv ./kime-check ./build/out
          scripts/release-zst.sh .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: other
          path: ./build/out/*

      - name: Upload zst
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.url }}
          asset_path: ./kime.tar.zst
          asset_name: kime-${{ github.ref }}.tar.zst
          asset_content_type: application/zstd

  build-qt5:
    needs:
      - build-engine
      - create-release

    runs-on: ubuntu-18.04

    strategy:
      matrix:
        qt5:
          - 5.9.5
          - 5.11.3
          - 5.12.8
          - 5.14.2
          - 5.15.2

    steps:
      - name: Download engine
        uses: actions/download-artifact@v2
        with:
          name: engine
          path: .

      - name: Install engine
        run: sudo cp ./libkime_engine.so /usr/lib

      - name: Cache Qt-${{ matrix.qt5 }}
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: /opt/Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt5 }}

      - name: Install Qt-${{ matrix.qt5 }}
        uses: jurplel/install-qt-action@v2
        with:
          dir: /opt
          version: ${{ matrix.qt5 }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          aqtversion: ==1.1.1
          py7zrversion: ==0.13.0

      - uses: actions/checkout@v2

      - name: Build Qt-${{ matrix.qt5 }}
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_QT5=ON ../src
          make -j$(nproc --all)
          strip -s ./lib/libkime-qt5.so

      - name: Upload Qt-${{ matrix.qt5 }} artifact
        uses: actions/upload-artifact@v2
        with:
          name: qt-${{matrix.qt5}}
          path: build/lib/libkime-qt5.so

      - name: Upload Qt-${{ matrix.qt5 }} file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.url }}
          asset_path: build/lib/libkime-qt5.so
          asset_name: libkime-qt-${{ matrix.qt5 }}.so
          asset_content_type: application/x-sharedlib

  build-qt6:
    needs:
      - build-engine
      - create-release

    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
        qt6:
          - 6.0.1

    steps:
      - name: Download engine
        uses: actions/download-artifact@v2
        with:
          name: engine
          path: .

      - name: Install engine
        run: sudo cp ./libkime_engine.so /usr/lib

      - name: Cache Qt-${{ matrix.qt6 }}
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: /opt/Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt5 }}

      - name: Install Qt-${{ matrix.qt6 }}
        uses: jurplel/install-qt-action@v2
        with:
          dir: /opt
          version: ${{ matrix.qt6 }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          aqtversion: ==1.1.1
          py7zrversion: ==0.13.0

      - uses: actions/checkout@v2

      - name: Build Qt-${{ matrix.qt6 }}
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_QT6=ON ../src
          make -j$(nproc --all)
          strip -s ./lib/libkime-qt6.so

      - name: Upload Qt-${{ matrix.qt6 }} artifact
        uses: actions/upload-artifact@v2
        with:
          name: qt-${{matrix.qt6}}
          path: build/lib/libkime-qt6.so

      - name: Upload Qt-${{ matrix.qt6 }} file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.url }}
          asset_path: build/lib/libkime-qt6.so
          asset_name: libkime-qt-${{ matrix.qt6 }}.so
          asset_content_type: application/x-sharedlib

  package-arch:
    needs:
      - build-other
      - build-qt5
      - build-qt6
      - create-release

    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - qt5: 5.9.5
            pkg: deb
            name: ubuntu-18.04
          - qt5: 5.12.8
            pkg: deb
            name: ubuntu-20.04
          - qt5: 5.14.2
            pkg: deb
            name: ubuntu-20.10
          - qt5: 5.11.3
            pkg: deb
            name: debian-buster
          - qt5: 5.15.2
            qt6: 6.0.1
            pkg: zst
            name: latest

    steps:
      - uses: actions/checkout@v2

      - name: Create out folder
        run: mkdir -pv ./build/out

      - name: Download qt5 artifact
        if: ${{ matrix.qt5 }}
        uses: actions/download-artifact@v2
        with:
          name: qt-${{ matrix.qt5 }}
          path: ./build/out

      - name: Download qt6 artifact
        if: ${{ matrix.qt6 }}
        uses: actions/download-artifact@v2
        with:
          name: qt-${{ matrix.qt6 }}
          path: ./build/out

      - name: Download other artifact
        uses: actions/download-artifact@v2
        with:
          name: other
          path: ./build/out

      - name: Create deb
        if: ${{ matrix.pkg == 'deb' }}
        run: scripts/release-deb.sh .

      - name: Upload deb
        if: ${{ matrix.pkg == 'deb' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.url }}
          asset_path: ./kime_amd64.deb
          asset_name: kime_${{ matrix.name }}_${{ github.ref }}_amd64.deb
          asset_content_type: application/x-xz

      - name: Create zst
        if: ${{ matrix.pkg == 'zst' }}
        run: scripts/release-zst.sh .

      - name: Upload zst
        if: ${{ matrix.pkg == 'zst' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.url }}
          asset_path: ./kime.tar.zst
          asset_name: kime_${{ matrix.name }}_${{ github.ref }}.tar.zst
          asset_content_type: application/zstd
